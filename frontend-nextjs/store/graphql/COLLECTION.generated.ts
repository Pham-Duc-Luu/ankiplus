/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import * as Types from '../types.generated';

import { graphqlApi } from '@/store/graphql/baseApi';
export type GetUserCollectionsQueryVariables = Types.Exact<{
  SKIP?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  LIMIT?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type GetUserCollectionsQuery = { __typename?: 'Query', getUserCollections: { __typename?: 'CollectionQueryGQLObject', total: number, skip: number, limit: number, data: Array<{ __typename?: 'CollectionGQLObject', _id: string, name: string, description?: string, thumnail?: string, icon?: string, isPublic?: boolean, language?: string, owner: string, createdAt: any, updatedAt: any }> } };

export type GetFLashCardsInCollectionQueryVariables = Types.Exact<{
  ID: Types.Scalars['String']['input'];
}>;


export type GetFLashCardsInCollectionQuery = { __typename?: 'Query', getCollectionFlashCards: { __typename?: 'FlashCardQueryGQLObject', total: number, skip: number, limit: number, data: Array<{ __typename?: 'FlashCardGQLObject', _id: string, front: string, back: string, inCollection: string }> } };


export const GetUserCollectionsDocument = `
    query GetUserCollections($SKIP: Int = 0, $LIMIT: Int = 10) {
  getUserCollections(skip: $SKIP, limit: $LIMIT) {
    total
    skip
    limit
    data {
      _id
      name
      description
      thumnail
      icon
      isPublic
      language
      owner
      createdAt
      updatedAt
    }
  }
}
    `;
export const GetFLashCardsInCollectionDocument = `
    query GetFLashCardsInCollection($ID: String!) {
  getCollectionFlashCards(collection_id: $ID) {
    total
    skip
    limit
    data {
      _id
      front
      back
      inCollection
    }
  }
}
    `;

const injectedRtkApi = graphqlApi.injectEndpoints({
  endpoints: (build) => ({
    GetUserCollections: build.query<GetUserCollectionsQuery, GetUserCollectionsQueryVariables | void>({
      query: (variables) => ({ document: GetUserCollectionsDocument, variables })
    }),
    GetFLashCardsInCollection: build.query<GetFLashCardsInCollectionQuery, GetFLashCardsInCollectionQueryVariables>({
      query: (variables) => ({ document: GetFLashCardsInCollectionDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useGetUserCollectionsQuery, useLazyGetUserCollectionsQuery, useGetFLashCardsInCollectionQuery, useLazyGetFLashCardsInCollectionQuery } = injectedRtkApi;

