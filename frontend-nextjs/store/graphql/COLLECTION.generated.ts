/* eslint-disable */ /**
 *
 * THIS FILE IS AUTOGENERATED, DO NOT EDIT IT!
 *
 * instead, edit one of the `.graphql` files in this project and run
 *
 * npm run graphql-codegen
 *
 * for this file to be re-created
 */

import * as Types from '../types.generated';

import { graphqlApi } from '@/store/graphql/baseApi';
export type GetUserCollectionsQueryVariables = Types.Exact<{
  SKIP?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  LIMIT?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type GetUserCollectionsQuery = { __typename?: 'Query', getUserCollections: { __typename?: 'CollectionQueryGQLObject', total: number, skip: number, limit: number, data: Array<{ __typename?: 'CollectionGQLObject', _id: string, name: string, description?: string, thumbnail?: string, icon?: string, isPublic?: boolean, language?: string, owner: string, createdAt: any, updatedAt: any }> } };

export type GetFLashCardsInCollectionQueryVariables = Types.Exact<{
  ID: Types.Scalars['String']['input'];
}>;


export type GetFLashCardsInCollectionQuery = { __typename?: 'Query', getCollectionFlashCards: { __typename?: 'FlashCardQueryGQLObject', total: number, skip: number, limit: number, data: Array<{ __typename?: 'FlashCardGQLObject', _id: string, front: string, back: string, inCollection: string }> } };

export type GetCollectionDetailQueryVariables = Types.Exact<{
  ID: Types.Scalars['String']['input'];
}>;


export type GetCollectionDetailQuery = { __typename?: 'Query', getCollectionById: { __typename?: 'CollectionGQLObject', name: string, description?: string, thumbnail?: string, icon?: string, isPublic?: boolean, language?: string, owner: string, createdAt: any, updatedAt: any } };

export type GetNeedToReviewFlashCardsQueryVariables = Types.Exact<{
  ID: Types.Scalars['String']['input'];
  SKIP?: Types.InputMaybe<Types.Scalars['Int']['input']>;
  LIMIT?: Types.InputMaybe<Types.Scalars['Int']['input']>;
}>;


export type GetNeedToReviewFlashCardsQuery = { __typename?: 'Query', getNeedToReviewFlashCards: { __typename?: 'NeedToReviewFlashCardGQLObject', total: number, skip: number, limit: number, data: Array<{ __typename?: 'FlashCardGQLObject', _id: string, front: string, back: string, inCollection: string, SRS: { __typename?: 'SRSGQLObject', _id: string, nextReviewDate: any, interval: number, efactor: number } }> } };


export const GetUserCollectionsDocument = `
    query GetUserCollections($SKIP: Int = 0, $LIMIT: Int = 10) {
  getUserCollections(skip: $SKIP, limit: $LIMIT) {
    total
    skip
    limit
    data {
      _id
      name
      description
      thumbnail
      icon
      isPublic
      language
      owner
      createdAt
      updatedAt
    }
  }
}
    `;
export const GetFLashCardsInCollectionDocument = `
    query GetFLashCardsInCollection($ID: String!) {
  getCollectionFlashCards(collection_id: $ID) {
    total
    skip
    limit
    data {
      _id
      front
      back
      inCollection
    }
  }
}
    `;
export const GetCollectionDetailDocument = `
    query GetCollectionDetail($ID: String!) {
  getCollectionById(id: $ID) {
    name
    description
    thumbnail
    icon
    isPublic
    language
    owner
    createdAt
    updatedAt
  }
}
    `;
export const GetNeedToReviewFlashCardsDocument = `
    query GetNeedToReviewFlashCards($ID: String!, $SKIP: Int = 0, $LIMIT: Int = 30) {
  getNeedToReviewFlashCards(collection_id: $ID, limit: $LIMIT, skip: $SKIP) {
    total
    skip
    limit
    data {
      _id
      front
      back
      inCollection
      SRS {
        _id
        nextReviewDate
        interval
        efactor
      }
    }
  }
}
    `;

const injectedRtkApi = graphqlApi.injectEndpoints({
  endpoints: (build) => ({
    GetUserCollections: build.query<GetUserCollectionsQuery, GetUserCollectionsQueryVariables | void>({
      query: (variables) => ({ document: GetUserCollectionsDocument, variables })
    }),
    GetFLashCardsInCollection: build.query<GetFLashCardsInCollectionQuery, GetFLashCardsInCollectionQueryVariables>({
      query: (variables) => ({ document: GetFLashCardsInCollectionDocument, variables })
    }),
    GetCollectionDetail: build.query<GetCollectionDetailQuery, GetCollectionDetailQueryVariables>({
      query: (variables) => ({ document: GetCollectionDetailDocument, variables })
    }),
    GetNeedToReviewFlashCards: build.query<GetNeedToReviewFlashCardsQuery, GetNeedToReviewFlashCardsQueryVariables>({
      query: (variables) => ({ document: GetNeedToReviewFlashCardsDocument, variables })
    }),
  }),
});

export { injectedRtkApi as api };
export const { useGetUserCollectionsQuery, useLazyGetUserCollectionsQuery, useGetFLashCardsInCollectionQuery, useLazyGetFLashCardsInCollectionQuery, useGetCollectionDetailQuery, useLazyGetCollectionDetailQuery, useGetNeedToReviewFlashCardsQuery, useLazyGetNeedToReviewFlashCardsQuery } = injectedRtkApi;

